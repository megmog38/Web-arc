# dict(1) completion

{ have dict || have rdict; } && {
_dictdata()
{
    dict $host $port $1 2>/dev/null | sed -ne \
        's/^['$'\t '']['$'\t '']*\([^'$'\t '']*\).*$/\1/p'
}

_dict()
{
    local cur prev host port db dictfile

    COMPREPLY=()
    cur=`_get_cword`
    prev=${COMP_WORDS[COMP_CWORD-1]}
    dictfile=/usr/share/dict/words

    for (( i=1; i < COMP_CWORD; i++ )); do
        case "${COMP_WORDS[i]}" in
        -@(h|--host))
            host=${COMP_WORDS[i+1]}
            [ -n "$host" ] && host="-h $host"
            i=$((++i))
            ;;
        -@(p|-port))
            port=${COMP_WORDS[i+1]}
            [ -n "$port" ] && port="-p $port"
            i=$((++i))
            ;;
        -@(d|-database))
            db=${COMP_WORDS[i+1]}
            [ -n "$db" ] && host="-d $db"
            i=$((++i))
            ;;
        *)
            ;;
        esac
    done

    if [[ "$cur" = -* ]]; then
        COMPREPLY=( $( compgen -W '-h --host -p --port -d --database \
                   -m --match -s --strategy -c --config -C \
                   --nocorrect -D --dbs -S --strats -H \
                   --serverhelp -i --info -I --serverinfo \
                   -a --noauth -u --user -k --key -V --version \
                   -L --license --help -v --verbose -r --raw \
                   -P --pager --debug --html --pipesize --client' \
                   -- "$cur" ) )
        return 0
    fi

    case "$prev" in
    -@(d|-database|i|info))
        COMPREPLY=( $( compgen -W '$( _dictdata -D )' -- "$cur" ) )
        return 0
        ;;
    -@(s|-strategy))
        COMPREPLY=( $( compgen -W '$( _dictdata -S )' -- "$cur" ) )
        return 0
        ;;
    *)
        ;;
    esac

    [ -r $dictfile ] && \
        COMPREPLY=( $( compgen -W '$( cat $dictfile )' -- "$cur" ) )
}
complete -F _dict $default dict rdict
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
